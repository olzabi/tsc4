forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";


{-
  TASK 1 -

   Find branch of the cell tree

  Write the method that will find a branch of the tree
   by comparing its hash with the hash received in the first parameter.

  When the algorithm finds the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned.
-}

() recv_internal() {
}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  if (tree.is_null()) {
    return begin_cell().end_cell();
  }

  tuple s = null();
  s~push_back(tree);

  while (~ s.is_null()) {
    cell c = s~pop_back();
    if (c.cell_hash() == hash) {
      return c;
    }

    slice sl = c.begin_parse();
    repeat (sl.slice_refs()) {
      s~push_back(sl~load_ref());
    }
  }
  return begin_cell().end_cell();
}
